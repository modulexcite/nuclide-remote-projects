Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.sanitizeNuclideUri = sanitizeNuclideUri;
exports.getOpenFileEditorForRemoteProject = getOpenFileEditorForRemoteProject;

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _nuclideRemoteUri = require('nuclide-remote-uri');

var _nuclideAtomHelpers = require('nuclide-atom-helpers');

'use babel';

var NUCLIDE_PROTOCOL_PREFIX = 'nuclide:/';
var NUCLIDE_PROTOCOL_PREFIX_LENGTH = NUCLIDE_PROTOCOL_PREFIX.length;

/**
 * Clean a nuclide URI from the prepended absolute path prefixes and fix
 * the broken uri, in the sense that it's nuclide:/server:897/path/to/dir instead of
 * nuclide://server:897/path/to/dir because Atom called path.normalize() on the directory uri.
 */

function sanitizeNuclideUri(uri) {
  // Remove the leading absolute path prepended to the file paths
  // between atom reloads.
  var protocolIndex = uri.indexOf(NUCLIDE_PROTOCOL_PREFIX);
  if (protocolIndex > 0) {
    uri = uri.substring(protocolIndex);
  }
  // Add the missing slash, if removed through a path.normalize() call.
  if (uri.startsWith(NUCLIDE_PROTOCOL_PREFIX) && uri[NUCLIDE_PROTOCOL_PREFIX_LENGTH] !== '/' /*protocol missing last slash*/) {

      uri = uri.substring(0, NUCLIDE_PROTOCOL_PREFIX_LENGTH) + '/' + uri.substring(NUCLIDE_PROTOCOL_PREFIX_LENGTH);
    }
  return uri;
}

function* getOpenFileEditorForRemoteProject(connectionConfig) {
  for (var _pane of atom.workspace.getPanes()) {
    var paneItems = _pane.getItems();
    for (var paneItem of paneItems) {
      if (!(0, _nuclideAtomHelpers.isTextEditor)(paneItem) || !paneItem.getURI()) {
        // Ignore non-text editors and new editors with empty uris / paths.
        continue;
      }
      var _uri = sanitizeNuclideUri(paneItem.getURI());

      var _parse = (0, _nuclideRemoteUri.parse)(_uri);

      var fileHostname = _parse.hostname;
      var _filePath = _parse.path;

      if (fileHostname === connectionConfig.host && _filePath.startsWith(connectionConfig.cwd)) {
        yield {
          pane: _pane,
          editor: paneItem,
          // While restore opened files, the remote port might have been changed if the server
          // restarted after upgrade or user killed it. So we need to create a new uri using
          // the right port.
          uri: (0, _nuclideRemoteUri.createRemoteUri)(fileHostname, connectionConfig.port, _filePath),
          filePath: _filePath
        };
      }
    }
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL2FwbS9udWNsaWRlLXJlbW90ZS1wcm9qZWN0cy9saWIvdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Z0NBV3FDLG9CQUFvQjs7a0NBTTlCLHNCQUFzQjs7QUFqQmpELFdBQVcsQ0FBQzs7QUFjWixJQUFNLHVCQUF1QixHQUFHLFdBQVcsQ0FBQztBQUM1QyxJQUFNLDhCQUE4QixHQUFHLHVCQUF1QixDQUFDLE1BQU0sQ0FBQzs7Ozs7Ozs7QUFnQi9ELFNBQVMsa0JBQWtCLENBQUMsR0FBVyxFQUFVOzs7QUFHdEQsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQzNELE1BQUksYUFBYSxHQUFHLENBQUMsRUFBRTtBQUNyQixPQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztHQUNwQzs7QUFFRCxNQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsSUFDdkMsR0FBRyxDQUFDLDhCQUE4QixDQUFDLEtBQUssR0FBRyxrQ0FBa0M7O0FBRS9FLFNBQUcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSw4QkFBOEIsQ0FBQyxHQUNsRCxHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0tBQ3pEO0FBQ0QsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFTSxVQUFVLGlDQUFpQyxDQUNoRCxnQkFBK0MsRUFDYjtBQUNsQyxPQUFLLElBQU0sS0FBSSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUU7QUFDNUMsUUFBTSxTQUFTLEdBQUcsS0FBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ2xDLFNBQUssSUFBTSxRQUFRLElBQUksU0FBUyxFQUFFO0FBQ2hDLFVBQUksQ0FBQyx3QkFyQ0gsWUFBWSxFQXFDSSxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRTs7QUFFakQsaUJBQVM7T0FDVjtBQUNELFVBQU0sSUFBRyxHQUFHLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDOzttQkFDRCxzQkFoRC9DLEtBQUssRUFnRGdELElBQUcsQ0FBQzs7VUFBMUMsWUFBWSxVQUF0QixRQUFRO1VBQXNCLFNBQVEsVUFBZCxJQUFJOztBQUNuQyxVQUFJLFlBQVksS0FBSyxnQkFBZ0IsQ0FBQyxJQUFJLElBQUksU0FBUSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUN2RixjQUFNO0FBQ0osY0FBSSxFQUFKLEtBQUk7QUFDSixnQkFBTSxFQUFFLFFBQVE7Ozs7QUFJaEIsYUFBRyxFQUFFLHNCQXhEQSxlQUFlLEVBd0RDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsU0FBUSxDQUFDO0FBQ25FLGtCQUFRLEVBQVIsU0FBUTtTQUNULENBQUM7T0FDSDtLQUNGO0dBQ0Y7Q0FDRiIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9hcG0vbnVjbGlkZS1yZW1vdGUtcHJvamVjdHMvbGliL3V0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IHtwYXJzZSwgY3JlYXRlUmVtb3RlVXJpfSBmcm9tICdudWNsaWRlLXJlbW90ZS11cmknO1xuaW1wb3J0IHR5cGUge1JlbW90ZUNvbm5lY3Rpb25Db25maWd1cmF0aW9ufSBmcm9tICdudWNsaWRlLXJlbW90ZS1jb25uZWN0aW9uL2xpYi9SZW1vdGVDb25uZWN0aW9uJztcblxuY29uc3QgTlVDTElERV9QUk9UT0NPTF9QUkVGSVggPSAnbnVjbGlkZTovJztcbmNvbnN0IE5VQ0xJREVfUFJPVE9DT0xfUFJFRklYX0xFTkdUSCA9IE5VQ0xJREVfUFJPVE9DT0xfUFJFRklYLmxlbmd0aDtcblxuaW1wb3J0IHtpc1RleHRFZGl0b3J9IGZyb20gJ251Y2xpZGUtYXRvbS1oZWxwZXJzJztcblxuZXhwb3J0IHR5cGUgT3BlbkZpbGVFZGl0b3JJbnN0YW5jZSA9IHtcbiAgcGFuZTogYXRvbSRQYW5lO1xuICBlZGl0b3I6IGF0b20kVGV4dEVkaXRvcjtcbiAgdXJpOiBOdWNsaWRlVXJpO1xuICBmaWxlUGF0aDogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBDbGVhbiBhIG51Y2xpZGUgVVJJIGZyb20gdGhlIHByZXBlbmRlZCBhYnNvbHV0ZSBwYXRoIHByZWZpeGVzIGFuZCBmaXhcbiAqIHRoZSBicm9rZW4gdXJpLCBpbiB0aGUgc2Vuc2UgdGhhdCBpdCdzIG51Y2xpZGU6L3NlcnZlcjo4OTcvcGF0aC90by9kaXIgaW5zdGVhZCBvZlxuICogbnVjbGlkZTovL3NlcnZlcjo4OTcvcGF0aC90by9kaXIgYmVjYXVzZSBBdG9tIGNhbGxlZCBwYXRoLm5vcm1hbGl6ZSgpIG9uIHRoZSBkaXJlY3RvcnkgdXJpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVOdWNsaWRlVXJpKHVyaTogc3RyaW5nKTogc3RyaW5nIHtcbiAgLy8gUmVtb3ZlIHRoZSBsZWFkaW5nIGFic29sdXRlIHBhdGggcHJlcGVuZGVkIHRvIHRoZSBmaWxlIHBhdGhzXG4gIC8vIGJldHdlZW4gYXRvbSByZWxvYWRzLlxuICBjb25zdCBwcm90b2NvbEluZGV4ID0gdXJpLmluZGV4T2YoTlVDTElERV9QUk9UT0NPTF9QUkVGSVgpO1xuICBpZiAocHJvdG9jb2xJbmRleCA+IDApIHtcbiAgICB1cmkgPSB1cmkuc3Vic3RyaW5nKHByb3RvY29sSW5kZXgpO1xuICB9XG4gIC8vIEFkZCB0aGUgbWlzc2luZyBzbGFzaCwgaWYgcmVtb3ZlZCB0aHJvdWdoIGEgcGF0aC5ub3JtYWxpemUoKSBjYWxsLlxuICBpZiAodXJpLnN0YXJ0c1dpdGgoTlVDTElERV9QUk9UT0NPTF9QUkVGSVgpICYmXG4gICAgICB1cmlbTlVDTElERV9QUk9UT0NPTF9QUkVGSVhfTEVOR1RIXSAhPT0gJy8nIC8qcHJvdG9jb2wgbWlzc2luZyBsYXN0IHNsYXNoKi8pIHtcblxuICAgIHVyaSA9IHVyaS5zdWJzdHJpbmcoMCwgTlVDTElERV9QUk9UT0NPTF9QUkVGSVhfTEVOR1RIKSArXG4gICAgICAgICcvJyArIHVyaS5zdWJzdHJpbmcoTlVDTElERV9QUk9UT0NPTF9QUkVGSVhfTEVOR1RIKTtcbiAgfVxuICByZXR1cm4gdXJpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24qIGdldE9wZW5GaWxlRWRpdG9yRm9yUmVtb3RlUHJvamVjdChcbiAgY29ubmVjdGlvbkNvbmZpZzogUmVtb3RlQ29ubmVjdGlvbkNvbmZpZ3VyYXRpb24sXG4pOiBJdGVyYXRvcjxPcGVuRmlsZUVkaXRvckluc3RhbmNlPiB7XG4gIGZvciAoY29uc3QgcGFuZSBvZiBhdG9tLndvcmtzcGFjZS5nZXRQYW5lcygpKSB7XG4gICAgY29uc3QgcGFuZUl0ZW1zID0gcGFuZS5nZXRJdGVtcygpO1xuICAgIGZvciAoY29uc3QgcGFuZUl0ZW0gb2YgcGFuZUl0ZW1zKSB7XG4gICAgICBpZiAoIWlzVGV4dEVkaXRvcihwYW5lSXRlbSkgfHwgIXBhbmVJdGVtLmdldFVSSSgpKSB7XG4gICAgICAgIC8vIElnbm9yZSBub24tdGV4dCBlZGl0b3JzIGFuZCBuZXcgZWRpdG9ycyB3aXRoIGVtcHR5IHVyaXMgLyBwYXRocy5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCB1cmkgPSBzYW5pdGl6ZU51Y2xpZGVVcmkocGFuZUl0ZW0uZ2V0VVJJKCkpO1xuICAgICAgY29uc3Qge2hvc3RuYW1lOiBmaWxlSG9zdG5hbWUsIHBhdGg6IGZpbGVQYXRofSA9IHBhcnNlKHVyaSk7XG4gICAgICBpZiAoZmlsZUhvc3RuYW1lID09PSBjb25uZWN0aW9uQ29uZmlnLmhvc3QgJiYgZmlsZVBhdGguc3RhcnRzV2l0aChjb25uZWN0aW9uQ29uZmlnLmN3ZCkpIHtcbiAgICAgICAgeWllbGQge1xuICAgICAgICAgIHBhbmUsXG4gICAgICAgICAgZWRpdG9yOiBwYW5lSXRlbSxcbiAgICAgICAgICAvLyBXaGlsZSByZXN0b3JlIG9wZW5lZCBmaWxlcywgdGhlIHJlbW90ZSBwb3J0IG1pZ2h0IGhhdmUgYmVlbiBjaGFuZ2VkIGlmIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAvLyByZXN0YXJ0ZWQgYWZ0ZXIgdXBncmFkZSBvciB1c2VyIGtpbGxlZCBpdC4gU28gd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgdXJpIHVzaW5nXG4gICAgICAgICAgLy8gdGhlIHJpZ2h0IHBvcnQuXG4gICAgICAgICAgdXJpOiBjcmVhdGVSZW1vdGVVcmkoZmlsZUhvc3RuYW1lLCBjb25uZWN0aW9uQ29uZmlnLnBvcnQsIGZpbGVQYXRoKSxcbiAgICAgICAgICBmaWxlUGF0aCxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==
