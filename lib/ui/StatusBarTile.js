
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var ConnectionState = require('../ConnectionState');

var _require = require('../notification');

var notifyLocalDiskFile = _require.notifyLocalDiskFile;
var notifyConnectedRemoteFile = _require.notifyConnectedRemoteFile;
var notifyDisconnectedRemoteFile = _require.notifyDisconnectedRemoteFile;

var React = require('react-for-atom');
var PropTypes = React.PropTypes;

var StatusBarTile = React.createClass({
  displayName: 'StatusBarTile',

  propTypes: {
    connectionState: PropTypes.number.isRequired,
    fileUri: PropTypes.string
  },

  render: function render() {
    var iconName = null;
    switch (this.props.connectionState) {
      case ConnectionState.NONE:
        break;
      case ConnectionState.LOCAL:
        iconName = 'device-desktop';
        break;
      case ConnectionState.CONNECTED:
        iconName = 'cloud-upload';
        break;
      case ConnectionState.DISCONNECTED:
        iconName = 'alert';
        break;
    }
    // When the active pane isn't a text editor, e.g. diff view, preferences, ..etc.,
    // We don't show a connection status bar.
    if (!iconName) {
      return null;
    }
    return React.createElement('span', {
      className: 'icon icon-' + iconName + ' nuclide-remote-projects-status-icon',
      onClick: this.onStatusBarTileClicked
    });
  },

  onStatusBarTileClicked: function onStatusBarTileClicked() {
    switch (this.props.connectionState) {
      case ConnectionState.LOCAL:
        notifyLocalDiskFile(this.props.fileUri);
        break;
      case ConnectionState.CONNECTED:
        notifyConnectedRemoteFile(this.props.fileUri);
        break;
      case ConnectionState.DISCONNECTED:
        notifyDisconnectedRemoteFile(this.props.fileUri);
        break;
    }
  }
});

module.exports = StatusBarTile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy93MS9fMm1jNm0wNTBxbjIzMm5wc2Y5ejNoZnNoNThfamgvVC90bXBpMzV6akdwdWJsaXNoX3BhY2thZ2VzL2FwbS9udWNsaWRlLXJlbW90ZS1wcm9qZWN0cy9saWIvdWkvU3RhdHVzQmFyVGlsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7QUFXWixJQUFJLGVBQWUsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQzs7ZUFLaEQsT0FBTyxDQUFDLGlCQUFpQixDQUFDOztJQUg1QixtQkFBbUIsWUFBbkIsbUJBQW1CO0lBQ25CLHlCQUF5QixZQUF6Qix5QkFBeUI7SUFDekIsNEJBQTRCLFlBQTVCLDRCQUE0Qjs7QUFFOUIsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDakMsU0FBUyxHQUFJLEtBQUssQ0FBbEIsU0FBUzs7QUFFZCxJQUFJLGFBQWEsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDOzs7QUFDcEMsV0FBUyxFQUFFO0FBQ1QsbUJBQWUsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVU7QUFDNUMsV0FBTyxFQUFFLFNBQVMsQ0FBQyxNQUFNO0dBQzFCOztBQUVELFFBQU0sRUFBQSxrQkFBa0I7QUFDdEIsUUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLFlBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlO0FBQ2hDLFdBQUssZUFBZSxDQUFDLElBQUk7QUFDdkIsY0FBTTtBQUFBLEFBQ1IsV0FBSyxlQUFlLENBQUMsS0FBSztBQUN4QixnQkFBUSxHQUFHLGdCQUFnQixDQUFDO0FBQzVCLGNBQU07QUFBQSxBQUNSLFdBQUssZUFBZSxDQUFDLFNBQVM7QUFDNUIsZ0JBQVEsR0FBRyxjQUFjLENBQUM7QUFDMUIsY0FBTTtBQUFBLEFBQ1IsV0FBSyxlQUFlLENBQUMsWUFBWTtBQUMvQixnQkFBUSxHQUFHLE9BQU8sQ0FBQztBQUNuQixjQUFNO0FBQUEsS0FDVDs7O0FBR0QsUUFBSSxDQUFDLFFBQVEsRUFBRTtBQUNiLGFBQU8sSUFBSSxDQUFDO0tBQ2I7QUFDRCxXQUNFO0FBQ0UsZUFBUyxpQkFBZSxRQUFRLHlDQUF1QztBQUN2RSxhQUFPLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixBQUFDO01BQ3JDLENBQ0Y7R0FDSDs7QUFFRCx3QkFBc0IsRUFBQSxrQ0FBUztBQUM3QixZQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZTtBQUNoQyxXQUFLLGVBQWUsQ0FBQyxLQUFLO0FBQ3hCLDJCQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDeEMsY0FBTTtBQUFBLEFBQ1IsV0FBSyxlQUFlLENBQUMsU0FBUztBQUM1QixpQ0FBeUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlDLGNBQU07QUFBQSxBQUNSLFdBQUssZUFBZSxDQUFDLFlBQVk7QUFDL0Isb0NBQTRCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNqRCxjQUFNO0FBQUEsS0FDVDtHQUNGO0NBQ0YsQ0FBQyxDQUFDOztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy93MS9fMm1jNm0wNTBxbjIzMm5wc2Y5ejNoZnNoNThfamgvVC90bXBpMzV6akdwdWJsaXNoX3BhY2thZ2VzL2FwbS9udWNsaWRlLXJlbW90ZS1wcm9qZWN0cy9saWIvdWkvU3RhdHVzQmFyVGlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBDb25uZWN0aW9uU3RhdGUgPSByZXF1aXJlKCcuLi9Db25uZWN0aW9uU3RhdGUnKTtcbnZhciB7XG4gIG5vdGlmeUxvY2FsRGlza0ZpbGUsXG4gIG5vdGlmeUNvbm5lY3RlZFJlbW90ZUZpbGUsXG4gIG5vdGlmeURpc2Nvbm5lY3RlZFJlbW90ZUZpbGUsXG59ID0gcmVxdWlyZSgnLi4vbm90aWZpY2F0aW9uJyk7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC1mb3ItYXRvbScpO1xudmFyIHtQcm9wVHlwZXN9ID0gUmVhY3Q7XG5cbnZhciBTdGF0dXNCYXJUaWxlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBwcm9wVHlwZXM6IHtcbiAgICBjb25uZWN0aW9uU3RhdGU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBmaWxlVXJpOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9LFxuXG4gIHJlbmRlcigpOiA/UmVhY3RFbGVtZW50IHtcbiAgICB2YXIgaWNvbk5hbWUgPSBudWxsO1xuICAgIHN3aXRjaCAodGhpcy5wcm9wcy5jb25uZWN0aW9uU3RhdGUpIHtcbiAgICAgIGNhc2UgQ29ubmVjdGlvblN0YXRlLk5PTkU6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDb25uZWN0aW9uU3RhdGUuTE9DQUw6XG4gICAgICAgIGljb25OYW1lID0gJ2RldmljZS1kZXNrdG9wJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENvbm5lY3Rpb25TdGF0ZS5DT05ORUNURUQ6XG4gICAgICAgIGljb25OYW1lID0gJ2Nsb3VkLXVwbG9hZCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDb25uZWN0aW9uU3RhdGUuRElTQ09OTkVDVEVEOlxuICAgICAgICBpY29uTmFtZSA9ICdhbGVydCc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBXaGVuIHRoZSBhY3RpdmUgcGFuZSBpc24ndCBhIHRleHQgZWRpdG9yLCBlLmcuIGRpZmYgdmlldywgcHJlZmVyZW5jZXMsIC4uZXRjLixcbiAgICAvLyBXZSBkb24ndCBzaG93IGEgY29ubmVjdGlvbiBzdGF0dXMgYmFyLlxuICAgIGlmICghaWNvbk5hbWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW5cbiAgICAgICAgY2xhc3NOYW1lPXtgaWNvbiBpY29uLSR7aWNvbk5hbWV9IG51Y2xpZGUtcmVtb3RlLXByb2plY3RzLXN0YXR1cy1pY29uYH1cbiAgICAgICAgb25DbGljaz17dGhpcy5vblN0YXR1c0JhclRpbGVDbGlja2VkfVxuICAgICAgLz5cbiAgICApO1xuICB9LFxuXG4gIG9uU3RhdHVzQmFyVGlsZUNsaWNrZWQoKTogdm9pZCB7XG4gICAgc3dpdGNoICh0aGlzLnByb3BzLmNvbm5lY3Rpb25TdGF0ZSkge1xuICAgICAgY2FzZSBDb25uZWN0aW9uU3RhdGUuTE9DQUw6XG4gICAgICAgIG5vdGlmeUxvY2FsRGlza0ZpbGUodGhpcy5wcm9wcy5maWxlVXJpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENvbm5lY3Rpb25TdGF0ZS5DT05ORUNURUQ6XG4gICAgICAgIG5vdGlmeUNvbm5lY3RlZFJlbW90ZUZpbGUodGhpcy5wcm9wcy5maWxlVXJpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENvbm5lY3Rpb25TdGF0ZS5ESVNDT05ORUNURUQ6XG4gICAgICAgIG5vdGlmeURpc2Nvbm5lY3RlZFJlbW90ZUZpbGUodGhpcy5wcm9wcy5maWxlVXJpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhdHVzQmFyVGlsZTtcbiJdfQ==
